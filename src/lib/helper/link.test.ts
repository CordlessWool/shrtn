import { describe, expect, test } from 'vitest';
import { isIPv4InRange, isIPv6InRange, isPublicLink } from './link';

describe('isPublicLink', () => {
	test.each([
		['http://192.168.1.1'],
		['https://192.168.255.255/some/extra'],
		['postgres://10.0.0.1'],
		['file://172.16.0.1'],
		['http://192.168.0.5'],
		['mongo://10.50.50.50'],
		['https://172.31.255.254'],
		['ftp://192.168.100.100']
	])('url is private – %s', async (link) => {
		const result = await isPublicLink(link);
		expect(result).toBe(false);
	});

	test.each([
		['https://test.de'],
		['https://gooogle.com'],
		['https://heise.de'],
		['https://golem.de'],
		['https://bing.com'],
		['https://linkedin.com']
	])('url is public – %s', async (link) => {
		const result = await isPublicLink(link);
		expect(result).toBe(true);
	});
});

describe('isPrivateLink', () => {
	test.each([
		['192.168.1.1', '192.168.0.0', 16],
		['192.168.255.255', '192.168.0.0', 16],
		['10.0.0.1', '10.0.0.0', 8],
		['172.16.0.1', '172.16.0.0', 12],
		['192.168.0.5', '192.168.0.0', 24],
		['10.50.50.50', '10.0.0.0', 8],
		['172.31.255.254', '172.16.0.0', 12],
		['192.168.100.100', '192.168.0.0', 16]
	])('should be in subnet – IP: %s Range: %s Subnet Size: %d', async (ip, range, subnetSize) => {
		const result = isIPv4InRange(ip, range, subnetSize);
		expect(result).toBe(true);
	});

	test.each([
		// 30 cases where the IP is not in subnet (non-borderline)
		['192.166.1.2', '192.168.0.0', 16],
		['10.0.1.2', '192.168.0.0', 16],
		['172.10.0.1', '172.16.0.0', 12],
		['192.168.10.1', '192.168.0.0', 24],
		['11.0.0.1', '10.0.0.0', 8],
		['11.255.255.255', '10.0.0.0', 8],
		['192.169.0.1', '192.168.0.0', 16],
		['192.168.1.1', '192.168.2.0', 24],
		['172.32.0.1', '172.16.0.0', 12],
		['192.168.0.254', '192.168.1.0', 24],
		['8.8.4.4', '8.8.8.0', 24],
		['8.8.7.7', '8.8.8.0', 24],
		['126.255.255.255', '127.0.0.0', 8],
		['220.0.0.1', '224.0.0.0', 4],
		['192.0.2.2', '192.0.2.0', 31],
		['203.0.113.15', '203.0.113.0', 29],
		['192.88.97.1', '192.88.98.0', 23],
		['100.64.4.10', '100.64.0.0', 22],
		['198.51.100.255', '198.51.100.0', 25],
		['198.51.100.200', '198.51.100.0', 25],
		['169.253.255.255', '169.254.0.0', 16],
		['192.0.0.5', '192.0.0.0', 30],
		['192.0.0.6', '192.0.0.0', 30],
		['10.10.10.20', '10.10.10.0', 28],
		['10.10.10.17', '10.10.10.0', 28],
		['192.240.1.1', '192.240.0.0', 24],
		['203.0.113.9', '203.0.113.0', 30],
		['172.16.32.1', '172.16.0.0', 20],
		['198.17.255.0', '198.18.0.0', 24],
		['203.0.114.1', '203.0.113.0', 24],

		// 20 close-by cases (IP just outside the valid subnet range)
		['192.167.255.255', '192.168.0.0', 24],
		['192.168.1.0', '192.168.0.0', 24],
		['9.255.255.255', '10.0.0.0', 29],
		['10.0.0.8', '10.0.0.0', 29],
		['172.15.255.255', '172.16.0.0', 20],
		['172.16.16.0', '172.16.0.0', 20],
		['203.0.112.255', '203.0.113.0', 29],
		['203.0.113.8', '203.0.113.0', 29],
		['198.51.99.255', '198.51.100.0', 25],
		['198.51.100.128', '198.51.100.0', 25],
		['100.63.255.255', '100.64.0.0', 22],
		['100.64.4.0', '100.64.0.0', 22],
		['192.0.1.255', '192.0.2.0', 31],
		['192.0.2.2', '192.0.2.0', 31],
		['191.255.255.255', '192.0.0.0', 30],
		['192.0.0.4', '192.0.0.0', 30],
		['10.10.9.255', '10.10.10.0', 28],
		['10.10.10.16', '10.10.10.0', 28],
		['172.19.255.255', '172.20.0.0', 24],
		['172.20.1.0', '172.20.0.0', 24]
	])(
		'should be NOT in subnet – IP: %s Range: %s Subnet Size: %d',
		async (ip, range, subnetSize) => {
			const result = isIPv4InRange(ip, range, subnetSize);
			expect(result).toBe(false);
		}
	);
});

describe('isIPv6InRange', () => {
	test.each([
		['2001:db8::1', '2001:db8::', 32],
		['2001:db8:0:ff00::1', '2001:db8:0:ff00::', 64],
		['fe80::1', 'fe80::', 64],
		['2001:0db8:85a3::8a2e:370:7334', '2001:db8:85a3::', 48]
	])('should be in subnet – IP: %s Range: %s Prefix: %d', async (ip, range, prefix) => {
		const result = isIPv6InRange(ip, range, prefix);
		expect(result).toBe(true);
	});

	test.each([
		['2000:db9::1', '2001:db8::', 32],
		['2001:db7:0:ff01::1', '2001:db8:0:ff00::', 64],
		['fe81::1', 'fe80::', 64],
		['2001:0eb8:85a3::8a2e:370:7335', '2001:db8:85a3::', 48]
	])('should be NOT in subnet – IP: %s Range: %s Prefix: %d', async (ip, range, prefix) => {
		const result = isIPv6InRange(ip, range, prefix);
		expect(result).toBe(false);
	});
});
